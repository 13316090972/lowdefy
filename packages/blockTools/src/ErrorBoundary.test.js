/*
  Copyright 2020-2021 Lowdefy, Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import React from 'react';
import { create, act } from 'react-test-renderer';
import ErrorBoundary from './ErrorBoundary';

let logError;
beforeAll(() => {
  logError = console.error;
  console.error = () => undefined;
});
afterAll(() => {
  console.error = logError;
});

test('no error', () => {
  let comp;
  act(() => {
    comp = create(
      <ErrorBoundary>
        <div>one</div>
      </ErrorBoundary>
    );
  });
  act(() => {
    comp.update(
      <ErrorBoundary>
        <div>one</div>
      </ErrorBoundary>
    );
  });
  expect(comp.toJSON()).toMatchInlineSnapshot(`
    <div>
      one
    </div>
  `);
});

test('display no error message on error generated by child', () => {
  const ProblemChild = () => {
    throw new Error('ErrorBoundary test error');
  };
  let comp;
  act(() => {
    comp = create(
      <ErrorBoundary>
        <ProblemChild />
      </ErrorBoundary>
    );
  });

  act(() => {
    comp.update(
      <ErrorBoundary>
        <ProblemChild />
      </ErrorBoundary>
    );
  });
  expect(comp.toJSON()).toMatchInlineSnapshot(`""`);
});

test('display error message on error generated by child', () => {
  const ProblemChild = () => {
    throw new Error('ErrorBoundary test error');
  };
  let comp;
  act(() => {
    comp = create(
      <ErrorBoundary fullPage>
        <ProblemChild />
      </ErrorBoundary>
    );
  });

  act(() => {
    comp.update(
      <ErrorBoundary fullPage>
        <ProblemChild />
      </ErrorBoundary>
    );
  });
  expect(comp.toJSON()).toMatchInlineSnapshot(`
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "fontFamily": "system-ui",
          "height": "100%",
          "justifyContent": "center",
          "margin": 0,
        }
      }
    >
      <div
        style={
          Object {
            "flex": "0 1 auto",
            "fontSize": "4.3em",
            "fontWeight": "100",
            "paddingRight": 30,
          }
        }
      >
        500
      </div>
      <div
        style={
          Object {
            "borderLeft": "1px solid #aeaeae",
            "flex": "0 1 auto",
            "maxWidth": 400,
            "paddingLeft": 30,
          }
        }
      >
        <div
          style={
            Object {
              "fontSize": "1.3em",
              "fontWeight": "300",
              "paddingBottom": 10,
            }
          }
        >
          Error
        </div>
        <div
          style={
            Object {
              "fontSize": "0.9em",
            }
          }
        >
          ErrorBoundary test error
        </div>
        <div
          style={
            Object {
              "fontSize": "0.9em",
            }
          }
        />
        <div
          style={
            Object {
              "paddingTop": 20,
            }
          }
        >
          <a
            href="/"
          >
            Return to home page
          </a>
        </div>
      </div>
    </div>
  `);
});

test('display error message and description on error generated by child', () => {
  const ProblemChild = () => {
    throw new Error('ErrorBoundary test error');
  };
  let comp;
  act(() => {
    comp = create(
      <ErrorBoundary fullPage description="error description">
        <ProblemChild />
      </ErrorBoundary>
    );
  });

  act(() => {
    comp.update(
      <ErrorBoundary fullPage description="error description">
        <ProblemChild />
      </ErrorBoundary>
    );
  });
  expect(comp.toJSON()).toMatchInlineSnapshot(`
    <div
      style={
        Object {
          "alignItems": "center",
          "display": "flex",
          "fontFamily": "system-ui",
          "height": "100%",
          "justifyContent": "center",
          "margin": 0,
        }
      }
    >
      <div
        style={
          Object {
            "flex": "0 1 auto",
            "fontSize": "4.3em",
            "fontWeight": "100",
            "paddingRight": 30,
          }
        }
      >
        500
      </div>
      <div
        style={
          Object {
            "borderLeft": "1px solid #aeaeae",
            "flex": "0 1 auto",
            "maxWidth": 400,
            "paddingLeft": 30,
          }
        }
      >
        <div
          style={
            Object {
              "fontSize": "1.3em",
              "fontWeight": "300",
              "paddingBottom": 10,
            }
          }
        >
          Error
        </div>
        <div
          style={
            Object {
              "fontSize": "0.9em",
            }
          }
        >
          ErrorBoundary test error
        </div>
        <div
          style={
            Object {
              "fontSize": "0.9em",
            }
          }
        >
          error description
        </div>
        <div
          style={
            Object {
              "paddingTop": 20,
            }
          }
        >
          <a
            href="/"
          >
            Return to home page
          </a>
        </div>
      </div>
    </div>
  `);
});

test('display fallback component on error generated by child', () => {
  const ProblemChild = () => {
    throw new Error('ErrorBoundary test error');
  };
  let comp;
  act(() => {
    comp = create(
      <ErrorBoundary fallback={(error) => <div>fallback: {error.message}</div>}>
        <ProblemChild />
      </ErrorBoundary>
    );
  });

  act(() => {
    comp.update(
      <ErrorBoundary fallback={(error) => <div>fallback: {error.message}</div>}>
        <ProblemChild />
      </ErrorBoundary>
    );
  });
  expect(comp.toJSON()).toMatchInlineSnapshot(`
    <div>
      fallback: 
      ErrorBoundary test error
    </div>
  `);
});
