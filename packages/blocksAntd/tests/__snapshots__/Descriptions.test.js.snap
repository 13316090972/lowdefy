// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render default 1`] = `
<div
  className="ant-descriptions"
>
  <div
    className="ant-descriptions-view"
  >
    <table>
      <tbody />
    </table>
  </div>
</div>
`;

exports[`Render properties.items-object 1`] = `
<div
  className="ant-descriptions"
>
  <div
    className="ant-descriptions-view"
  >
    <table>
      <tbody>
        <tr
          className="ant-descriptions-row"
        >
          <td
            className="ant-descriptions-item"
            colSpan={1}
          >
            <span
              className="ant-descriptions-item-label"
            >
              one
            </span>
            <span
              className="ant-descriptions-item-content"
            >
              1
            </span>
          </td>
          <td
            className="ant-descriptions-item"
            colSpan={2}
          >
            <span
              className="ant-descriptions-item-label"
            >
              two
            </span>
            <span
              className="ant-descriptions-item-content"
            >
              2
            </span>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
`;

exports[`Render properties.opt 1`] = `
<div
  className="ant-descriptions"
>
  <div
    className="ant-descriptions-view"
  >
    <table>
      <tbody />
    </table>
  </div>
</div>
`;

exports[`Test Schema default 1`] = `true`;

exports[`Test Schema default 2`] = `null`;

exports[`Test Schema properties.items-object 1`] = `false`;

exports[`Test Schema properties.items-object 2`] = `
Array [
  Object {
    "dataPath": "/properties/items/0/value",
    "keyword": "type",
    "message": "should be string",
    "params": Object {
      "type": "string",
    },
    "schemaPath": "#/properties/properties/properties/items/anyOf/0/items/properties/value/type",
  },
  Object {
    "dataPath": "/properties/items/1/value",
    "keyword": "type",
    "message": "should be string",
    "params": Object {
      "type": "string",
    },
    "schemaPath": "#/properties/properties/properties/items/anyOf/0/items/properties/value/type",
  },
  Object {
    "dataPath": "/properties/items",
    "keyword": "type",
    "message": "should be object",
    "params": Object {
      "type": "object",
    },
    "schemaPath": "#/properties/properties/properties/items/anyOf/1/type",
  },
  Object {
    "dataPath": "/properties/items",
    "keyword": "anyOf",
    "message": "should match some schema in anyOf",
    "params": Object {},
    "schemaPath": "#/properties/properties/properties/items/anyOf",
  },
]
`;

exports[`Test Schema properties.opt 1`] = `false`;

exports[`Test Schema properties.opt 2`] = `
Array [
  Object {
    "dataPath": "/properties",
    "keyword": "additionalProperties",
    "message": "should NOT have additional properties",
    "params": Object {
      "additionalProperty": "a",
    },
    "schemaPath": "#/properties/properties/additionalProperties",
  },
]
`;
