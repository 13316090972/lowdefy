# Copyright 2020-2021 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/blog.yaml.njk
  vars:
    pageId: generate-pdf-document-from-data
    pageTitle: How to generate PDFs using Lowdefy
    section: How To
    filePath: howto/generate-pdf.yaml
    pageImage: /public/images/howto/header_generate_pdf.jpg
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            It is possible to extend the functionality of Lowdefy beyond the framework's current capabilities by creating custom blocks, actions or operators. In this "how to" example we will create a custom action to generate PDF documents client side or in the browser.

            To see how this works, click this button to generate a PDF of this how-to guide.
      - id: pdf_generate_button
        type: Button
        style:
          textAlign: center
        properties:
          title: Generate & Download PDF
          icon: DownloadOutlined
          color: '#6293F8'
        events:
          onClick:
            - id: generate_pdf
              type: JsAction
              params:
                name: pdfMake
                args:
                  - generated-with-lowdefy.pdf
                  - pageMargins: 50
                    defaultStyle:
                      fontSize: 10
                    images:
                      header_img:
                        _string.concat:
                          # - _location: origin
                          - http://localhost:3000/public/images/howto/header_generate_pdf.jpg
                    content:
                      - width: 400
                        image: header_img
                      - text: |
                          How to generate PDFs using Lowdefy
                        fontSize: 18
                        margin: [0, 20]
                        bold: true
                        alignment: center
                      - text: |
                          It is possible to extend the functionality of Lowdefy beyond the framework's current capabilities by creating custom blocks, actions or operators. In this "how to" example we will create a custom action to generate PDF documents client side or in the browser.
                      - text: |
                          Generate PDF TDLR;
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true
                      - text:
                          - "1. Select a client side PDF library and add the javascript to your Lowdefy app, we'll be using"
                          - text: ' pdfMake'
                            link: https://github.com/bpampuch/pdfmake
                            color: blue
                          - '.'
                      - text:
                          - '2. Register a custom'
                          - text: ' JsAction '
                            link: /JsAction
                            color: blue
                          - method to generate the PDF document.
                      - 3. Add a button with a onClick action to call the generate PDF method.
                      - 4. Define the content of your PDF and add data variables as needed.
                      - text: |
                          Background
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true
                      - |
                        Generating PDFs is often required in workflow application where data needs to be parsed into a document. These type of documents can be anything from quotes or invoices to contracts or even recipes. Making these documents a 100% represent the latest data, or exactly match the desired formatting can be tricky and time consuming and thats were a auto generated PDFs can be a great solution.

                        This how-to assumes that you are already running a Lowdefy app locally in dev mode. If not:
                      - margin: [10, 0]
                        text: |
                          a) Create a empty folder.
                          b) Open your terminal or cmd and `cd` to your empty folder.
                          c) Run `npx lowdefy@latest init && npx lowdefy@latest dev` to initialize and start your Lowdefy app.
                      - text: |
                          1. Choosing a open-source PDF library
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true
                      - |
                        The power of open-source is just amazing and as a result there are a number of well tested, popular, easy to use and free PDF generating libraries out there to choose from. Some of the popular ones are:
                      - margin: [10, 0]
                        stack:
                          - text: '- pdfMake'
                            link: https://github.com/bpampuch/pdfmake
                            color: blue
                          - text: '- JsPDF'
                            link: https://github.com/MrRio/jsPDF
                            color: blue
                          - text: '- PDFKit'
                            link: https://github.com/foliojs/pdfkit
                            color: blue
                          - text: '- Puppeteer'
                            link: https://github.com/puppeteer/puppeteer
                            color: blue
                          - text: '- PDF-lib'
                            link: https://github.com/Hopding/pdf-lib
                            color: blue
                      - |
                        If you use open-source libraries to automate your business and save you time, the easiest to contribute to these tools is often just to sponsor the package maintainers. Please do do where possible. Look for the sponsorship links usually found in the repository readme files.
                      - text: |
                          2. Register a custom javascript Action
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true
                      - |
                        Lowdefy actions are triggered by page events, like `onClick` when a user clicks a button, or `onEnter` when the page loads. Lowdefy comes with a list of predefined actions, however, sometimes nothing beats adding custom code. Let's create a custom action which will generate a PDF based on pdfMake config.
                      - margin: [10, 0]
                        text: |
                          1) Create a `public` folder inside your Lowdefy working directory.
                          2) Since all content in the `public` folder is served by the Lowdefy server, simply create a `pdfMake.js` file inside the `public` folder.
                          3) Add this script to the file and save.
                      - margin: 10
                        layout: noBorders
                        style:
                          fontSize: 8
                        table:
                          widths: ['*']
                          body:
                            - - ''
                            - - fillColor: '#F0F0F0'
                                margin: 10
                                preserveLeadingSpaces: true
                                text: |
                                  import importUmd from './importUmd.js';
                                  import vfs from './vfs_fonts.js';
                                  const pdfMake = await importUmd(
                                    `https://unpkg.com/pdfmake@0.1.71/build/pdfmake.min.js`
                                  );
                                  const pdfMakeFn = async (
                                    context,
                                    filename,
                                    docDefinition,
                                    tableLayouts,
                                    fonts
                                  ) => {
                                    await pdfMake
                                      .createPdf(docDefinition, tableLayouts, fonts, vfs)
                                      .download(filename);
                                  };
                                  window.lowdefy.registerJsAction('pdfMake', pdfMakeFn);
                      - |
                        This script does a few things, first, it imports importUmd.js and the 'vfs_fonts.js' file also from the public folder. Then it loads pdfMake from UNPKG. Then we create an async function pdfMakeFn which takes some parameters like the filename and docDefinition and passes it to pdfMake as it is being called.

                        Finally, and crucially, it registers the pdfMakeFn function as a custom JsAction using window.lowdefy.registerJsAction. This gives our new method to the Lowdefy logic engine to use.

                        IMPORTANT: We mentioned two other files here. importUmd.js is a helper function to load umd modules from a source, and vfs_fonts.js is a virtualized font which we need to provide to pdfMake. Download these files and them inside your public folder.

                        With our javascript ready, we need to load the javascript onto our page in order for it to be evaluated by the browser.

                        Create a `my_header.html` file inside your project route and add the following HTML:
                      - margin: 10
                        layout: noBorders
                        style:
                          fontSize: 8
                        table:
                          widths: ['*']
                          body:
                            - - ''
                            - - fillColor: '#F0F0F0'
                                margin: 10
                                text: |
                                  <script defer type="module" src="/public/modules/pdfMake.js"></script>
                      - |
                        This loaded our `pdfMake.js` module file into HTML.

                        5) Finally, add your HTML to you Lowdefy application header. To do this, use the `app.html.appendHead` Lowdefy config property. So your `lowdefy.yaml` file should now look something like this:
                      - margin: 10
                        layout: noBorders
                        style:
                          fontSize: 8
                        table:
                          widths: ['*']
                          body:
                            - - ''
                            - - fillColor: '#F0F0F0'
                                margin: 10
                                preserveLeadingSpaces: true
                                text: |
                                  name: Generate a PDF
                                  lowdefy: {{ version }}

                                  app:
                                    html:
                                      appendHead:
                                        _ref: my_header.html
                      - |
                        Congratulations 🎉 your custom JSAction is now available in you Lowdefy app and ready to use.

                        Up until this part, this how-to has been very generic and would probably by the same for any app using pdfMake to generate PDFs.

                        In the next part we will configure our example app to demonstrate how to control when and what PDF should be generated.

                        ## 3. Add a button and a action to generate a PDF

                        For this part of the example, we will add a button to the page, and when the button is clicked, our PDF will be generated client side and downloaded by the user's browser.

                        Let's make this quick and simple, we'll change our Lowdefy config to:
                      - text: |
                          3. Add a button and a action to generate a PDF
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true
                      - |
                        For this part of the example, we will add a button to the page, and when the button is clicked, our PDF will be generated client side and downloaded by the user's browser.

                        Let's make this quick and simple, we'll change our Lowdefy config to:
                      - margin: 10
                        layout: noBorders
                        style:
                          fontSize: 8
                        table:
                          widths: ['*']
                          body:
                            - - ''
                            - - fillColor: '#F0F0F0'
                                margin: 10
                                preserveLeadingSpaces: true
                                text: |
                                  name: Generate a PDF
                                  lowdefy: {{ version }}

                                  app:
                                    html:
                                      appendHead:
                                        _ref: my_header.html

                                  pages:
                                    - id: generate-a-pdf
                                      type: PageHeaderMenu
                                      blocks:
                                        - id: make_pdf_button
                                          type: Button
                                          properties:
                                            title: Download PDF
                                            icon: DownloadOutlined
                                          events:
                                            onClick:
                                              - id: make_pdf
                                                type: JsAction
                                                params:
                                                  name: pdfMake
                                                  args:
                                                    - my_file_name.pdf
                                                    - pageMargins: 50
                                                      defaultStyle:
                                                        fontSize: 10
                                                      content:
                                                        - text: This pdf has been generated with Lowdefy and pdfMake.
                                                          bold: true
                      - |
                        When you run this app, you'll have a 'Download PDF' button, and when clicked this button will download a generated pdf document.
                      - text: |
                          4. Define the content of the PDF and add data variables as needed
                        fontSize: 14
                        margin: [0, 20, 0, 10]
                        bold: true

      - id: md2
        type: MarkdownWithCode
        properties:
          content: |
            Now click this button to share this article on Twitter 😉
      - id: twitter_button
        type: Button
        style:
          textAlign: center
        properties:
          title: Share this post
          icon: UploadOutlined
          color: '#6293F8'
        events:
          onClick:
            - id: share_twitter
              type: Link
              params:
                newTab: true
                url: https://twitter.com/intent/tweet?url=https%3A%2F%2Fdocs.lowdefy.com%2Fgenerate-pdf-document-from-data&text=Learn%20to%20generate%20pdf%20documents%20from%20data%20using%20@lowdefy%20-%20an%20open-source%2C%20self-hosted%2C%20low-code%20from%20work%20to%20build%20web%20apps%20and%20internal%20tools%20with%20ease.%20&hashtags=opensource%20%23selfhosted%20%23lowcode%20%23internaltools
      - id: md3
        type: MarkdownWithCode
        properties:
          content: |
            ## Generate PDF TDLR;

            1. Select a client side PDF library and add the javascript to your Lowdefy app, we'll be using [pdfMake](https://github.com/bpampuch/pdfmake).
            2. Register a custom [JsAction](/JsAction) method to generate the PDF document.
            3. Add a button with a onClick action to call the generate PDF method.
            4. Define the content of your PDF and add data variables as needed.

            ## Background

            Generating PDFs is often required in workflow application where data needs to be parsed into a document. These type of documents can be anything from quotes or invoices to contracts or even recipes. Making these documents a 100% represent the latest data, or exactly match the desired formatting can be tricky and time consuming and thats were a auto generated PDFs can be a great solution.

            This how-to assumes that you are already running a Lowdefy app locally in dev mode. If not:
            a) Create a empty folder.
            b) Open your terminal or cmd and `cd` to your empty folder.
            c) Run `npx lowdefy@latest init && npx lowdefy@latest dev` to initialize and start your Lowdefy app.

            ## 1. Choosing a open-source PDF library

            The power of open-source is just amazing and as a result there are a number of well tested, popular, easy to use and free PDF generating libraries out there to choose from. Some of the popular ones are:
              - [pdfMake](https://github.com/bpampuch/pdfmake)
              - [JsPDF](https://github.com/MrRio/jsPDF)
              - [PDFKit](https://github.com/foliojs/pdfkit)
              - [Puppeteer](https://github.com/puppeteer/puppeteer)
              - [PDF-lib](https://github.com/Hopding/pdf-lib)

            > If you use open-source libraries to automate your business and save you time, the easiest to contribute to these tools is often just to sponsor the package maintainers. Please do do where possible. Look for the sponsorship links usually found in the repository readme files.

            ## 2. Register a custom javascript Action

            Lowdefy actions are triggered by page events, like `onClick` when a user clicks a button, or `onEnter` when the page loads. Lowdefy comes with a list of predefined actions, however, sometimes nothing beats adding custom code. Let's create a custom action which will generate a PDF based on pdfMake config.

            1) Create a `public` folder inside your Lowdefy working directory.
            2) Since all content in the `public` folder is served by the Lowdefy server, simply create a `pdfMake.js` file inside the `public` folder.
            3) Add this script to the file and save.

            ```js
            import importUmd from './importUmd.js';
            import vfs from './vfs_fonts.js';
            const pdfMake = await importUmd(
              `https://unpkg.com/pdfmake@0.1.71/build/pdfmake.min.js`
            );
            const pdfMakeFn = async (
              context,
              filename,
              docDefinition,
              tableLayouts,
              fonts
            ) => {
              await pdfMake
                .createPdf(docDefinition, tableLayouts, fonts, vfs)
                .download(filename);
            };
            window.lowdefy.registerJsAction('pdfMake', pdfMakeFn);
            ```

            This script does a few things, first, it imports `importUmd.js` and the 'vfs_fonts.js' file also from the `public` folder. Then it loads [pdfMake](https://unpkg.com/pdfmake@0.1.71/build/pdfmake.min.js) from UNPKG. Then we create an async function `pdfMakeFn` which takes some parameters like the `filename` and `docDefinition` and passes it to pdfMake as it is being called.

            Finally, and crucially, it registers the `pdfMakeFn` function as a custom [JsAction](/JsAction) using `window.lowdefy.registerJsAction`. This gives our new method to the Lowdefy logic engine to use.

            > IMPORTANT: We mentioned two other files here. [`importUmd.js`](/public/modules/importUmd.js) is a helper function to load umd modules from a source, and [`vfs_fonts.js`](/public/modules/vfs_fonts.js) is a virtualized font which we need to provide to pdfMake. Download these files and them inside your `public` folder.

            4) With our javascript ready, we need to load the javascript onto our page in order for it to be evaluated by the browser.

            Create a `my_header.html` file inside your project route and add the following HTML:

            ```html
            <script defer type="module" src="/public/modules/pdfMake.js"></script>
            ```

            This loaded our `pdfMake.js` module file into HTML.

            5) Finally, add your HTML to you Lowdefy application header. To do this, use the `app.html.appendHead` Lowdefy config property. So your `lowdefy.yaml` file should now look something like this:

            ```yaml
            name: Generate a PDF
            lowdefy: {{ version }}

            app:
              html:
                appendHead:
                  _ref: my_header.html
            ```

            Congratulations 🎉 your custom JSAction is now available in you Lowdefy app and ready to use.

            Up until this part, this how-to has been very generic and would probably by the same for any app using pdfMake to generate PDFs.

            In the next part we will configure our example app to demonstrate how to control when and what PDF should be generated.

            ## 3. Add a button and a action to generate a PDF

            For this part of the example, we will add a button to the page, and when the button is clicked, our PDF will be generated client side and downloaded by the user's browser.

            Let's make this quick and simple, we'll change our Lowdefy config to:

            ```yaml
            name: Generate a PDF
            lowdefy: {{ version }}

            app:
              html:
                appendHead:
                  _ref: my_header.html

            pages:
              - id: generate-a-pdf
                type: PageHeaderMenu
                blocks:
                  - id: make_pdf_button
                    type: Button
                    properties:
                      title: Download PDF
                      icon: DownloadOutlined
                    events:
                      onClick:
                        - id: make_pdf
                          type: JsAction
                          params:
                            name: pdfMake
                            args:
                              - my_file_name.pdf
                              - pageMargins: 50
                                defaultStyle:
                                  fontSize: 10
                                content:
                                  - text: This pdf has been generated with Lowdefy and pdfMake.
                                    bold: true
            ```

            When you run this app, you'll have a 'Download PDF' button, and when clicked this button will download a generated pdf document. Simular to what this button does.

      - id: make_pdf_button
        type: Button
        style:
          textAlign: center
        properties:
          title: Download PDF
          icon: DownloadOutlined
        events:
          onClick:
            - id: make_pdf
              type: JsAction
              params:
                name: pdfMake
                args:
                  - my_file_name.pdf
                  - pageMargins: 50
                    defaultStyle:
                      fontSize: 10
                    content:
                      - text: This pdf has been generated with Lowdefy and pdfMake.
                        bold: true
      - id: md4
        type: MarkdownWithCode
        properties:
          content: |
            ## 4. Define the content of the PDF and add data variables as needed

            Finally to demonstrate how powerful this can be, we'll build out our pdfMake config to generate a quotation. In practice we would further build out our Lowdefy page to request the account data from our database and then pass the data to pdfMake when the button is clicked.

            Consider the following `lowdefy.yaml` file:

            ```
            name: Generate a PDF
            lowdefy: {{ version }}

            app:
              html:
                appendHead:
                  _ref: my_header.html
            pages:
              - id: generate-a-quote
                type: PageHeaderMenu
                events:
                  onEnter:
                    - id: init_data
                      type: SetState
                      params:
                        account:
                          id: A-BXC-000123
                          quote: 476
                          products:
                            - name: Hosting and Maintannce
                              qty: 1
                              price: 135
                              code: X12-33C
                            - name: Developer Hours
                              qty: 16
                              price: 60
                              code: X12-39A
                            - name: Designer Hours
                              qty: 4
                              price: 40
                              code: X12-21A
                            - name: Project Management
                              qty: 2
                              price: 60
                              code: X12-49A
                blocks:
                  - id: make_pdf_button
                    type: Button
                    properties:
                      title: Download Quotation
                      icon: DownloadOutlined
                    events:
                      onClick:
                        - id: make_pdf
                          type: JsAction
                          params:
                            name: pdfMake
                            args:
                              _ref:
                                path: quote_tmp.yaml
                                vars:
                                  account:
                                    _state: account
            ```

            Note that we have split out the pdfMake config into a seperate file `quote_template.yaml`. This makes it easier for us to use the same pdf template in various parts of our app config. In Lowdefy you can decide exatly what parts of the config you want ot split into speerate files, and alos pass varialble to the tempalte. See the [`_ref`](/_ref) operator for more details.

            Next, the `quote_template.yaml` setup:

            ```yaml
            - _nunjucks:
                template: '{{ id }}-{{ quote }}.pdf'
                on:
                  _state: account
            - pageMargins: 50
              defaultStyle:
                fontSize: 10
              content:
                - text: This pdf has been generated with Lowdefy and pdfMake.
                  bold: true

            ```



{% raw %}

{% endraw %}
